##开发环境封装
## @{
##  lighttpd 1.4.39
##  php-fpm 5.6.29
##  memcached 1.4
##  idllocator
##  xunsearch
## }

##基于alpine:3.4
FROM alpine:3.4

MAINTAINER baykier <1035666345@qq.com>

##所有目录不能以"/" 结束
##目录结构
#|--project
#   |--htdocs
#   |--log
#   	|--lighttpd
#   	|--php
#   	|--mysql
#   	...
#   |--config
#       |--lighttpd
#       |--php
#       |--mysql
#使用时将/var/project目录挂载到目录即可

##项目目录
ENV WORKER_DIR="/var/project"
##host目录
ENV HOST_DIR="$WORKER_DIR/htdocs"
##日志目录
ENV LOG_DIR="$WORKER_DIR/log"
##数据卷目录
ENV DATA_DIR="$WORKER_DIR/data"
##配置目录
ENV CONFIG_DIR="$WORKER_DIR/conf"
##配置数据备份目录
ENV BACKUP_DIR="/var/backup"
##创建目录如果不存在
RUN mkdir -p $WORKER_DIR $LOG_DIR $DATA_DIR $CONFIG_DIR $HOST_DIR $BACKUP_DIR

###########################################################################################
##
##            安装php-fpm5.6.29
##			  参考docker-library/php/5.6/fpm/alpine
##            安装php扩展
##            创建日志目录

ENV PHPIZE_DEPS \
		autoconf \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c
RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www-data \
	&& adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

##用设置的环境变量替换
## php配置目录
ENV PHP_INI_DIR $CONFIG_DIR/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3

ENV PHP_VERSION 5.6.29
ENV PHP_URL="https://secure.php.net/get/php-5.6.29.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-5.6.29.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="0ff352a433f73e2c82b0d5b283b600402518569bf72a74e247f356dacbf322a7" PHP_MD5="190bf5b52d1fc68d5500a8cdc7e33164"

RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps \
		gnupg \
		openssl \
	; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		rm -r "$GNUPGHOME"; \
	fi; \
	\
	apk del .fetch-deps

COPY ./php/docker-php-source /usr/local/bin/
##修复权限问题
RUN chmod 777 /usr/local/bin/docker-php-source \
	&& chown root:root /usr/local/bin/docker-php-source

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		curl-dev \
		libedit-dev \
		libxml2-dev \
		openssl-dev \
		sqlite-dev \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(getconf _NPROCESSORS_ONLN)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --recursive /usr/local \
			| awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
			| sort -u \
			| xargs -r apk info --installed \
			| sort -u \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps

COPY ./php/docker-php-ext-* ./php/docker-php-entrypoint /usr/local/bin/
##修复权限问题
RUN chmod 777 /usr/local/bin/docker-php-ext-* \
	&& chown root:root /usr/local/bin/docker-php-ext-* \
	&& chmod 777 /usr/local/bin/docker-php-entrypoint \
	&& chown root:root /usr/local/bin/docker-php-entrypoint

RUN set -ex \
	##用环境变量替代 创建php-fpm配置目录
	&& cd $PHP_INI_DIR \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo "$PHP_INI_DIR/php-fpm.d/*.conf"; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = [::]:9000'; \
	} | tee php-fpm.d/zz-docker.conf
##创建php日志目录

RUN mkdir -p $LOG_DIR/php

##复制php.ini php-fpm.conf
COPY ./php/php.ini $PHP_INI_DIR/
COPY ./php/php-fpm.conf $PHP_INI_DIR/
RUN set -ex \
	&& sed -i "s:{LOG_DIR}:$LOG_DIR:g" $PHP_INI_DIR/php.ini \
	&& sed -i "s:{LOG_DIR}:$LOG_DIR:g" $PHP_INI_DIR/php-fpm.conf \
	&& sed -i "s:{PHP_INI_DIR}:$PHP_INI_DIR:g" $PHP_INI_DIR/php-fpm.conf

########################################################################
##					安装php扩展
##       			创建日志目录

##创建sign目录
RUN mkdir -p /var/src/php-ext/sign
COPY ./php/sign/* /var/src/php-ext/sign/

RUN apk add --no-cache --virtual .build-deps  \
    						git \
    						autoconf \
    						g++ \
    						libtool \
    						make \
    	&& apk add --no-cache libmemcached-dev  \
                              zlib-dev \
                              cyrus-sasl-dev \
    	&& docker-php-source extract \
    	##安装memcache 扩展
    	&& pecl install memcache-2.2.7 \
    	&& docker-php-ext-enable memcache \
        ##安装memcached 扩展
        && pecl install memcached-2.2.0 \
        && docker-php-ext-enable memcached \

        ##安装gd库
        && apk add 	--no-cache \
           			freetype \
           			libpng \
           			libjpeg-turbo \
           			freetype-dev \
           			libpng-dev \
           			libjpeg-turbo-dev\
        && docker-php-ext-configure gd \
           			--with-gd \
           			--with-freetype-dir=/usr/include/ \
           			--with-png-dir=/usr/include/ \
           			--with-jpeg-dir=/usr/include/ \

        && docker-php-ext-install gd \
        && docker-php-ext-enable gd \
        && apk del 	--no-cache \
           			freetype-dev \
           			libpng-dev \
           			libjpeg-turbo-dev \
        ##启用xdebug
        && pecl install xdebug-2.5.0 \
        && docker-php-ext-enable xdebug \
        ##安装pdo_mysql
        && docker-php-ext-install pdo_mysql \
        ##安装mysqli
        && docker-php-ext-install mysqli \
        ##安装redis
        && pecl install redis-3.1.0 \
        && docker-php-ext-enable redis \
        ##安装mcrypt
        && apk add --no-cache \
        			libmcrypt-dev \
        			libltdl \
        && docker-php-ext-configure mcrypt \
        && docker-php-ext-install mcrypt \
        ## 安装calendar
        && docker-php-ext-install calendar \
        ## 安装zip
        && docker-php-ext-install zip \
        ## 安装exif
        && docker-php-ext-install exif \
        ## 安装intl
        && apk add --no-cache  	icu-dev \
        && pecl install intl \
	&& docker-php-ext-enable intl \
        ## 安装 sign
		&& mkdir -p /usr/src/php/ext/sign \
		&& cp  /var/src/php-ext/sign/* /usr/src/php/ext/sign/ \
		&& docker-php-ext-install sign \
		##清除
        && docker-php-source delete \
        && apk del .build-deps

##########################################################################################
##
##            安装lighttpd 1.4.39
##
##    使用时将配置文件指定为配置目录不用默认目录配置
##    配置目录$CONFIG_DIR/lighttpd/lighttpd.conf
##    容器运行时会自动创建这些目录

RUN apk add --update --no-cache \
	lighttpd \
	lighttpd-mod_auth \
  && rm -rf /var/cache/apk/*

##创建lighttpd 配置目录并复制配置文件

RUN mkdir -p $CONFIG_DIR/lighttpd  $LOG_DIR/lighttpd \
	&& cp /etc/lighttpd/* $CONFIG_DIR/lighttpd/
##当前配置
COPY ./lighttpd/* $CONFIG_DIR/lighttpd/
##替换日志目录 主站目录
RUN set -ex \
	&& sed -i "s:{LOG_DIR}:$LOG_DIR:g" $CONFIG_DIR/lighttpd/lighttpd.conf \
    && sed -i "s:{HOST_DIR}:$HOST_DIR:g" $CONFIG_DIR/lighttpd/lighttpd.conf \
    && sed -i "s:{CONF_DIR}:$CONFIG_DIR:g" $CONFIG_DIR/lighttpd/lighttpd.conf \
    && mkdir -p $CONFIG_DIR/lighttpd/vhosts \
    && echo "#vhost example.conf" > $CONFIG_DIR/lighttpd/vhosts/example.conf \
    && echo "#\$HTTP[\"host\"] == \"example.com\" {" >> $CONFIG_DIR/lighttpd/vhosts/example.conf \
    && echo "#server.name = \"example.com\" " >> $CONFIG_DIR/lighttpd/vhosts/example.conf \
    && echo "#server.document-root = \"example_path\" " >> $CONFIG_DIR/lighttpd/vhosts/example.conf \
    && echo "#}" >> $CONFIG_DIR/lighttpd/vhosts/example.conf     



########################################################################################
##
##                              安装memcached-1.4.34

## memcached 版本
ENV MEMCACHED_VERSION 1.4.34
ENV MEMCACHED_SHA1 7c7214f5183c6e20c22b243e21ed1ffddb91497e
## memcached 端口
ENV MEMCACHED_PORT 11211

RUN set -ex \
	&& apk add --no-cache --virtual .build-deps \
		gcc \
		libc-dev \
		libevent-dev \
		linux-headers \
		make \
		perl \
		tar \
	&& wget -O memcached.tar.gz "http://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz" \
	&& echo "$MEMCACHED_SHA1  memcached.tar.gz" | sha1sum -c - \
	&& mkdir -p /usr/src/memcached \
	&& tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 \
	&& rm memcached.tar.gz \
	&& cd /usr/src/memcached \
	&& ./configure \
	&& make -j$(getconf _NPROCESSORS_ONLN) \
	&& make install \
	&& cd / && rm -rf /usr/src/memcached \
	&& runDeps="$( \
		scanelf --needed --nobanner --recursive /usr/local \
			| awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
			| sort -u \
			| xargs -r apk info --installed \
			| sort -u \
	)" \
	&& apk add --virtual .memcached-rundeps $runDeps \
	&& apk del .build-deps

########################################################################################
##
##                                   安装sshd

RUN set -ex \
	&& apk add --update openssh \
	&& rm  -rf /tmp/* /var/cache/apk/* \
	##删除默认配置重新配置
	&& rm -rf /etc/ssh/ssh_host_* \
	&& ssh-keygen -A \
        ## 指定端口
	&& sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config \
	&& mkdir -p /var/run/sshd \
	##允许root用户登录 root用户密码默认为''
	&& echo '#allow root user login' >> /etc/ssh/sshd_config \
    && echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config \
    && echo 'PermitEmptyPasswords yes' >> /etc/ssh/sshd_config

########################################################################################
##
##                                安装idallocator

##创建目录并复制源码
ENV IDALLOCATOR_DIR /var/src/idallocator
RUN mkdir -p $IDALLOCATOR_DIR
COPY ./idallocator/* $IDALLOCATOR_DIR/

RUN set -ex \
	&& apk add --no-cache --virtual .build-deps \
		gcc \
		libc-dev \
	&& cd $IDALLOCATOR_DIR \
	&& gcc  idallocator.c \
	&& mv a.out /usr/local/bin/idallocator \
	##创建配置，日志，数据，PID目录
	&& mkdir -p $LOG_DIR/idallocator \
	&& mkdir -p $CONFIG_DIR/idallocator \
	&& mkdir -p $DATA_DIR/idallocator \
	&& mkdir -p /var/run/idallocator \
	&& cp $IDALLOCATOR_DIR/idallocator.conf $CONFIG_DIR/idallocator/ \
	##创建初始数据
	&& echo '1' > $DATA_DIR/idallocator/order.tb \
	&& echo '1' > $DATA_DIR/idallocator/goods.tb \
	##替换日志，数据目录
	&& sed -i "s:{LOG_DIR}:$LOG_DIR:g" $CONFIG_DIR/idallocator/idallocator.conf \
    && sed -i "s:{DATA_DIR}:$DATA_DIR:g" $CONFIG_DIR/idallocator/idallocator.conf \
    && apk del .build-deps

########################################################################################
##
##                      安装samba 同步映射目录

RUN set -ex \
	&& apk add --no-cache samba samba-common-tools  \
	&& rm -rf /var/cache/apk/* \
	&& mkdir -p $CONFIG_DIR/samba \
	&& cp -a /etc/samba/* $CONFIG_DIR/samba/ \
        && mkdir -p $LOG_DIR/samba 

COPY ./samba/* $CONFIG_DIR/samba/

RUN set -ex \
        && chown root:root $CONFIG_DIR/samba/smb.conf \
        && chmod 777 $CONFIG_DIR/samba/smb.conf \
	&& sed -i "s:{LOG_DIR}:$LOG_DIR:g" $CONFIG_DIR/samba/smb.conf \
       && sed -i "s:{WORKER_DIR}:$WORKER_DIR:g" $CONFIG_DIR/samba/smb.conf

########################################################################################
##
##                      配置文件备份防止设置数据卷丢失
##

##备份项目并修复权限问题
RUN cp -a $WORKER_DIR/* $BACKUP_DIR \
	&& chmod 777 -R $BACKUP_DIR

#########################################################################################
##
##                              初始化脚本
##

COPY ./init.sh /usr/local/bin/init.sh

##更改权限
RUN chmod 777 /usr/local/bin/init.sh \
	&& chown root:root /usr/local/bin/init.sh
##设置工作目录
WORKDIR $WORKER_DIR
##标记为数据卷
VOLUME ["$WORKER_DIR"]

##只对外暴露 80 443 22  137/udp 138/udp 139 445 端口
EXPOSE 80 443 22 137/udp 138/udp 139 445

ENTRYPOINT ["/usr/local/bin/init.sh"]







